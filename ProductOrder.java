/**
 * class ProductOrder defines an order of a specific product by a customer
 * 
 * The order number is generated by the system when a ProductOrder object is created.
 * 
 * Also stores any product options chosen by this customer (e.g. paperback book, certain size of a product etc)
 */
public class ProductOrder
{
	private String orderNumber;
	private Product product;
	private String productOptions;
	private Customer customer;

	/**
	 * Constructs a Product Order object
	 * @param orderNumber - Number that identifies a purchase
	 * @param product - Product that is ordered
	 * @param customer - Customer who ordered the product
	 * @param productOptions - Format of the product ordered
	 */
	public ProductOrder(String orderNumber, Product product, Customer customer, String productOptions)
	{
		this.orderNumber = orderNumber;
		this.product = product;
		this.customer = customer;
		this.productOptions = productOptions;
	}

	/**
	 * @return orderNumber - Number generated when a product is ordered.
	 */
	public String getOrderNumber()
	{
		return orderNumber;
	}

	/**
	 * @param orderNumber - Number generated when a product is ordered.
	 */
	public void setOrderNumber(String orderNumber)
	{
		this.orderNumber = orderNumber;
	}

	/**
	 * @return product - The product object that has been ordered.
	 */
	public Product getProduct()
	{
		return product;
	}

	/**
	 * @param product - The product object that has been ordered.
	 */
	public void setProduct(Product product)
	{
		this.product = product;
	}

	/**
	 * @return customer - The customer who has ordered the product.
	 */
	public Customer getCustomer()
	{
		return customer;
	}

	/**
	 * @param customer - The customer who has ordered the product.
	 */
	public void setCustomer(Customer customer)
	{
		this.customer = customer;
	}
	
	/**
	 * Prints this ProductOrder's informatinon. Printed information differs if the product is 
	 * a Book. 
	 */
	public void print()
	{
	if (product.getName().equals("Book")) 
	{
		System.out.printf("\nOrder # %3s Customer Id: %3s Product Id: %3s Product Name: %12s Options: %8s", orderNumber, customer.getId(), product.getId(), product.getName(), 
		productOptions);
	} else {
		System.out.printf("\nOrder # %3s Customer Id: %3s Product Id: %3s Product Name: %12s", orderNumber, customer.getId(), product.getId(), product.getName());
	}
		
	}
	/**
	 * Checks if two ProductOrder objects are equal based on their orderNumber.
	 * @param other - The other productOrder to be compared to this productOrder
	 * @return boolean - Returns true if the two orderNumber's are equal, else false.
	 */
	public boolean equals(Object other)
	{
		// Compare two ProductOrder objects based on their orderNumber strings
		// Replace the line below (Hint: look at class Product equals())
		ProductOrder otherP = (ProductOrder) other;
		return this.orderNumber.equals(otherP.orderNumber);
		
	}
}
